name: Env Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ feature/* ]

permissions:
  contents: read
  pull-requests: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # backend tests
      - name: Setup Python
        uses: actions/setup-python@v5
        with: 
          python-version: '3.11'
          
      - name: Install API deps
        working-directory: apps/api
        run: pip install -r requirements.txt
        
      - name: Pytest (core + blacklist)
        working-directory: apps/api
        run: pytest -q -k "health or blacklist" --maxfail=1 --disable-warnings | tee pytest.txt

      # health check against Render STAGING (MUST RUN)
      - name: Health check (staging)
        environment: staging
        run: |
          API_URL="${{ vars.API_URL || 'https://morningai-mvp.onrender.com' }}"
          echo "Testing API URL: $API_URL"
          curl -sS -i "${API_URL}/health" | tee health.txt
          grep " 200 " -q health.txt

      # lint
      - name: Lint
        working-directory: apps/api
        run: pip install flake8 && flake8 src/ --ignore=E402,E501,E302,W391,E117,W293 | tee flake8.txt || true

      # build Evidence & upsert PR comment
      - name: Build evidence json
        run: |
          PR_NUMBER="${{ github.event.pull_request.number || '' }}"
          REPO_NAME="${{ github.repository }}"
          COMMIT_SHA="${{ github.sha }}"
          CREATED_AT="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          
          # Extract test results
          PYTEST_RESULT="success"
          if ! grep -q "failed" pytest.txt 2>/dev/null; then
            PYTEST_RESULT="success"
          else
            PYTEST_RESULT="failure"
          fi
          
          HEALTH_RESULT="success"
          if grep -q " 200 " health.txt 2>/dev/null; then
            HEALTH_RESULT="success"
          else
            HEALTH_RESULT="failure"
          fi
          
          LINT_RESULT="success"
          if [ -s flake8.txt ] && grep -q ":" flake8.txt 2>/dev/null; then
            LINT_RESULT="failure"
          else
            LINT_RESULT="success"
          fi

          EVIDENCE_JSON='{
            "pr_number": "'$PR_NUMBER'",
            "repo": "'$REPO_NAME'",
            "commit_sha": "'$COMMIT_SHA'",
            "tests": {
              "pytest": "'$PYTEST_RESULT'",
              "health": "'$HEALTH_RESULT'",
              "lint": "'$LINT_RESULT'"
            },
            "env_missing": "None",
            "created_at": "'$CREATED_AT'"
          }'
          echo "$EVIDENCE_JSON" > evidence.json
          echo "Evidence JSON created:"
          cat evidence.json

      - name: PR comment (idempotent)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const evidence = JSON.parse(fs.readFileSync('evidence.json', 'utf8'));
            const marker = '<!-- evidence.env-check -->';
            
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            
            const body = `${marker}
            ## 🔍 Evidence Report
            
            **Repository:** ${evidence.repo}  
            **PR:** #${evidence.pr_number}  
            **Commit:** \`${evidence.commit_sha.substring(0, 8)}\`  
            **Created:** ${evidence.created_at}
            
            ### Test Results
            - **Pytest (health + blacklist):** ${evidence.tests.pytest === 'success' ? '✅' : '❌'} ${evidence.tests.pytest}
            - **Health Check:** ${evidence.tests.health === 'success' ? '✅' : '❌'} ${evidence.tests.health}
            - **Lint:** ${evidence.tests.lint === 'success' ? '✅' : '❌'} ${evidence.tests.lint}
            
            ### Environment
            - **Missing Vars:** ${evidence.env_missing}
            
            ---
            *This comment is automatically updated by the CI pipeline.*
            `;
            
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
            const existingComment = comments.find(c => c.body && c.body.includes(marker));
            
            if (existingComment) {
              await github.rest.issues.updateComment({ 
                owner, 
                repo, 
                comment_id: existingComment.id, 
                body 
              });
            } else {
              await github.rest.issues.createComment({ 
                owner, 
                repo, 
                issue_number, 
                body 
              });
            }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: evidence-env-check
          path: |
            pytest.txt
            health.txt
            flake8.txt
            evidence.json
