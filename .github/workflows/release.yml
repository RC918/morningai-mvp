name: Release

on: 
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  release_api:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: []
    continue-on-error: false
    strategy:
      max-attempts: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install API dependencies
        working-directory: apps/api
        run: pip install -r requirements.txt

      - name: API Import Smoke Test
        working-directory: apps/api
        run: |
          python -c "
          import importlib
          import sys
          modules = [
            'src.main',
            'src.routes.two_factor',
            'src.routes.auth',
            'src.routes.admin',
            'src.routes.jwt_blacklist',
            'src.decorators'
          ]
          for module in modules:
            try:
              importlib.import_module(module)
              print(f'✓ {module}')
            except Exception as e:
              print(f'✗ {module}: {e}')
              sys.exit(1)
          print('All imports successful!')
          " | tee release_log.txt

      - name: API Health Check (Local)
        working-directory: apps/api
        run: |
          echo "Starting local health check..." | tee -a release_log.txt
          nohup python src/main.py > api_dev.log 2>&1 &
          sleep 10
          curl --fail http://localhost:5000/health | tee -a release_log.txt

      - name: Get previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0

      - name: Generate Release Notes
        run: |
          echo "## API Release Notes for ${{ github.ref_name }}" > release_notes.md
          echo "### Changes since ${{ steps.previoustag.outputs.tag }}" >> release_notes.md
          echo "- API modules updated and tested" >> release_notes.md
          echo "- Health check verified" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Commits" >> release_notes.md
          git log --pretty=format:'- %h %s (%an)' ${{ steps.previoustag.outputs.tag }}..${{ github.ref_name }} >> release_notes.md
          echo "API release completed successfully" | tee -a release_log.txt

      - name: Create API Release Tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          tag_name: ${{ github.ref_name }}-api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload API Release Log
        uses: actions/upload-artifact@v4
        with:
          name: release_log_api
          path: |
            release_log.txt
            apps/api/api_dev.log

  release_web:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: []
    continue-on-error: false
    strategy:
      max-attempts: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Web dependencies
        working-directory: apps/web
        run: npm ci

      - name: Web Lint Check
        working-directory: apps/web
        run: npm run lint | tee release_log.txt

      - name: Web Type Check
        working-directory: apps/web
        run: npm run typecheck -- --skipLibCheck | tee -a release_log.txt

      - name: Web Unit Tests
        working-directory: apps/web
        run: npm run test | tee -a release_log.txt

      - name: Web Build Test
        working-directory: apps/web
        run: npm run build | tee -a release_log.txt

      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env staging'
        env:
          VERCEL_SCOPE: ${{ secrets.VERCEL_ORG_ID }}

      - name: Generate Web Release Notes
        run: |
          echo "## Web Release Notes for ${{ github.ref_name }}" > release_notes.md
          echo "### Web Application" >> release_notes.md
          echo "- Lint, type check, and tests passed" >> release_notes.md
          echo "- Build successful" >> release_notes.md
          echo "- Deployed to Vercel staging" >> release_notes.md
          echo "Web release completed successfully" | tee -a release_log.txt

      - name: Upload Web Release Log
        uses: actions/upload-artifact@v4
        with:
          name: release_log_web
          path: release_log.txt
