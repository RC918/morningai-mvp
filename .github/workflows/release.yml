name: Release

on:
  repository_dispatch:
    types: [safeguard-approved-release]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        type: string
      is_hotfix:
        description: 'Is this a hotfix deployment'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      continue_on_error:
        description: 'Continue on error (hotfix only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  contents: write

env:
  DEPLOY_TAG: ${{ github.event.client_payload.tag || github.event.inputs.tag || github.ref_name }}
  IS_HOTFIX: ${{ github.event.client_payload.is_hotfix || github.event.inputs.is_hotfix || 'false' }}
  CONTINUE_ON_ERROR: ${{ github.event.client_payload.continue_on_error || github.event.inputs.continue_on_error || 'false' }}
  TIMEOUT_MINUTES: ${{ github.event.client_payload.timeout_minutes || '15' }}

jobs:
  release_api:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJson(env.TIMEOUT_MINUTES) }}
    environment: production
    continue-on-error: ${{ env.IS_HOTFIX == 'true' && env.CONTINUE_ON_ERROR == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.DEPLOY_TAG }}

      - name: Get previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          echo "## Release Notes for ${{ github.ref_name }}" > CHANGELOG_PART.md
          echo "### Changes since ${{ steps.previoustag.outputs.tag }}" >> CHANGELOG_PART.md
          echo "" >> CHANGELOG_PART.md
          echo "### Corresponding PRs/Commits" >> CHANGELOG_PART.md
          git log --pretty=format:'- %h %s (%an)' ${{ steps.previoustag.outputs.tag }}..${{ github.ref_name }} >> CHANGELOG_PART.md
          echo "" >> CHANGELOG_PART.md
          echo "### DB/Migration Impact" >> CHANGELOG_PART.md
          echo "- No database migrations in this release" >> CHANGELOG_PART.md
          echo "" >> CHANGELOG_PART.md
          echo "### Rollback Steps" >> CHANGELOG_PART.md
          echo "- To rollback, deploy tag: ${{ steps.previoustag.outputs.tag }}" >> CHANGELOG_PART.md
          echo "- Run: \`git checkout ${{ steps.previoustag.outputs.tag }}\`" >> CHANGELOG_PART.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG_PART.md
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install API dependencies
        working-directory: apps/api
        run: pip install -r requirements.txt

      - name: API Import Smoke Test
        working-directory: apps/api
        run: |
          python -c "
          import importlib
          import sys
          modules = [
            'src.main',
            'src.routes.two_factor',
            'src.routes.auth',
            'src.routes.admin',
            'src.routes.jwt_blacklist',
            'src.decorators'
          ]
          for module in modules:
            try:
              importlib.import_module(module)
              print(f'✓ {module}')
            except Exception as e:
              print(f'✗ {module}: {e}')
              sys.exit(1)
          print('All imports successful!')
          " | tee release_log.txt

      - name: API Health Check (Local)
        working-directory: apps/api
        run: |
          echo "Starting local health check..." | tee -a release_log.txt
          nohup python src/main.py > api_dev.log 2>&1 &
          sleep 10
          curl --fail http://localhost:5000/health | tee -a release_log.txt

      - name: Build API Docker Image
        working-directory: apps/api
        run: |
          echo "Building API Docker image..." | tee -a release_log.txt
          docker build -t morningai-api:${{ env.DEPLOY_TAG }} .
          docker save morningai-api:${{ env.DEPLOY_TAG }} > api-docker-image.tar
          echo "API Docker image built and saved" | tee -a release_log.txt

      - name: Prepare Migration Scripts
        working-directory: apps/api
        run: |
          echo "Preparing migration scripts..." | tee -a release_log.txt
          mkdir -p migration-package
          cp -r alembic/ migration-package/
          cp -r migrations/ migration-package/ 2>/dev/null || echo "No migrations directory found"
          tar -czf migration-scripts.tar.gz migration-package/
          echo "Migration scripts packaged" | tee -a release_log.txt

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Post-Deploy Health Check
        run: |
          echo "Performing post-deploy health check..." | tee health_after_release.txt
          for i in {1..5}; do
            echo "Attempt $i/5" | tee -a health_after_release.txt
            if curl -I ${{ secrets.API_URL }}/health | tee -a health_after_release.txt; then
              echo "✓ Health check passed" | tee -a health_after_release.txt
              break
            else
              echo "✗ Health check failed, retrying..." | tee -a health_after_release.txt
              sleep 10
            fi
          done

      - name: Upload API Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release_artifacts_api_${{ env.DEPLOY_TAG }}
          path: |
            apps/api/release_log.txt
            apps/api/health_after_release.txt
            apps/api/api_dev.log
            apps/api/api-docker-image.tar
            apps/api/migration-scripts.tar.gz
          if-no-files-found: error
          retention-days: 30

  release_web:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJson(env.TIMEOUT_MINUTES) }}
    environment: production
    continue-on-error: ${{ env.IS_HOTFIX == 'true' && env.CONTINUE_ON_ERROR == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DEPLOY_TAG }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Web dependencies
        working-directory: apps/web
        run: npm ci

      - name: Web Lint Check
        working-directory: apps/web
        run: npm run lint | tee release_log.txt

      - name: Web Type Check
        working-directory: apps/web
        run: npm run typecheck -- --skipLibCheck | tee -a release_log.txt

      - name: Web Unit Tests
        working-directory: apps/web
        run: npm run test | tee -a release_log.txt

      - name: Web Build
        working-directory: apps/web
        run: |
          echo "Building web application..." | tee -a release_log.txt
          npm run build
          echo "Web build completed" | tee -a release_log.txt
          tar -czf web-build.tar.gz dist/

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Upload Web Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release_artifacts_web_${{ env.DEPLOY_TAG }}
          path: |
            apps/web/release_log.txt
            apps/web/web-build.tar.gz
          if-no-files-found: error
          retention-days: 30

  deployment_proof:
    runs-on: ubuntu-latest
    needs: [release_api, release_web]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DEPLOY_TAG }}

      - name: Generate Deployment Proof
        run: |
          echo "# DEPLOYMENT PROOF - ${{ env.DEPLOY_TAG }}" > DEPLOYMENT_PROOF.md
          echo "" >> DEPLOYMENT_PROOF.md
          echo "**Deployment Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> DEPLOYMENT_PROOF.md
          echo "**Tag**: ${{ env.DEPLOY_TAG }}" >> DEPLOYMENT_PROOF.md
          echo "**Commit**: ${{ github.sha }}" >> DEPLOYMENT_PROOF.md
          echo "**Is Hotfix**: ${{ env.IS_HOTFIX }}" >> DEPLOYMENT_PROOF.md
          echo "" >> DEPLOYMENT_PROOF.md
          echo "## Deployment Status" >> DEPLOYMENT_PROOF.md
          echo "- API Deployment: ${{ needs.release_api.result }}" >> DEPLOYMENT_PROOF.md
          echo "- Web Deployment: ${{ needs.release_web.result }}" >> DEPLOYMENT_PROOF.md
          echo "" >> DEPLOYMENT_PROOF.md
          echo "## Health Check Results" >> DEPLOYMENT_PROOF.md
          echo "- API Health: $(curl -s ${{ secrets.API_URL }}/health | jq -r '.status // "unknown"' 2>/dev/null || echo 'failed')" >> DEPLOYMENT_PROOF.md
          echo "- Web Health: $(curl -I ${{ secrets.WEB_URL }} 2>/dev/null | head -n1 | grep -q '200' && echo 'ok' || echo 'failed')" >> DEPLOYMENT_PROOF.md
          echo "" >> DEPLOYMENT_PROOF.md
          echo "## Artifacts Generated" >> DEPLOYMENT_PROOF.md
          echo "- API Docker Image: ✓" >> DEPLOYMENT_PROOF.md
          echo "- Web Build Package: ✓" >> DEPLOYMENT_PROOF.md
          echo "- Migration Scripts: ✓" >> DEPLOYMENT_PROOF.md

      - name: Upload Deployment Proof
        uses: actions/upload-artifact@v4
        with:
          name: deployment_proof_${{ env.DEPLOY_TAG }}
          path: DEPLOYMENT_PROOF.md
          if-no-files-found: error
          retention-days: 90
