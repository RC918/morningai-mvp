name: CI Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ feature/**, hotfix/** ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  env-check:
    runs-on: ubuntu-latest
    environment: staging
    strategy:
      matrix:
        app:
          - { name: web, path: apps/web }
          - { name: api, path: apps/api }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        if: ${{ matrix.app.name == 'api' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dotenv for check_env.mjs
        run: npm install -g dotenv

      - name: Create .env from GitHub Secrets
        run: |
          echo "SB_URL=${{ secrets.SB_URL }}" >> .env
          echo "SB_ANON_KEY=${{ secrets.SB_ANON_KEY }}" >> .env
          echo "SB_SERVICE_ROLE_KEY=${{ secrets.SB_SERVICE_ROLE_KEY }}" >> .env
          echo "SB_JWT_SECRET=${{ secrets.SB_JWT_SECRET }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Run Environment Check
        run: |
          node ops/env/scripts/check_env.mjs --env-file .env --app ${{ matrix.app.name }} | tee artifacts/${{ matrix.app.name }}_env_check.txt

      - name: Install dependencies
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "web" ]; then
            npm ci
          else
            pip install -r requirements.txt
          fi

      - name: Lint Check
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "web" ]; then
            npm run lint 2>&1 | tee ../../artifacts/${{ matrix.app.name }}_eslint.txt || echo "ESLint completed with warnings/errors" >> ../../artifacts/${{ matrix.app.name }}_eslint.txt
          else
            flake8 src/ 2>&1 | tee ../../artifacts/${{ matrix.app.name }}_flake8.txt || echo "Flake8 completed with warnings/errors" >> ../../artifacts/${{ matrix.app.name }}_flake8.txt
          fi

      - name: Type Check
        if: ${{ matrix.app.name == 'web' }}
        working-directory: ${{ matrix.app.path }}
        run: |
          npm run typecheck -- --skipLibCheck | tee ../../artifacts/${{ matrix.app.name }}_typecheck.txt

      - name: Alembic Migration Check
        if: ${{ matrix.app.name == 'api' }}
        working-directory: ${{ matrix.app.path }}
        run: |
          echo "=== Alembic Revision History ===" | tee ../../artifacts/alembic_history.txt
          alembic history | tail -n 20 | tee -a ../../artifacts/alembic_history.txt || echo "No migration history found" >> ../../artifacts/alembic_history.txt
          
          echo "=== Alembic Current Status ===" | tee ../../artifacts/alembic_current.txt
          alembic current -v 2>&1 | tee -a ../../artifacts/alembic_current.txt || echo "Alembic not initialized or no database connection" >> ../../artifacts/alembic_current.txt
          
          echo "=== Migration Dry-Run (SQL Generation) ===" | tee ../../artifacts/migration_dry_run.sql
          alembic upgrade head --sql 2>&1 | tee -a ../../artifacts/migration_dry_run.sql || echo "-- No migrations to apply or database connection issue" >> ../../artifacts/migration_dry_run.sql

      - name: Unit Tests
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "web" ]; then
            npm run test 2>&1 | tee ../../artifacts/${{ matrix.app.name }}_test.txt || echo "Tests completed with failures" >> ../../artifacts/${{ matrix.app.name }}_test.txt
          else
            pytest tests/ -v 2>&1 | tee ../../artifacts/${{ matrix.app.name }}_pytest.txt || echo "Tests completed with failures" >> ../../artifacts/${{ matrix.app.name }}_pytest.txt
          fi

      - name: Health Check
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "api" ]; then
            echo "Starting API health check..." | tee ../../artifacts/health.txt
            nohup python src/main.py > api_dev.log 2>&1 &
            sleep 10
            curl --fail http://localhost:5000/health 2>&1 | tee -a ../../artifacts/health.txt || echo "Health check failed" >> ../../artifacts/health.txt
          else
            echo "Web health check skipped" > ../../artifacts/${{ matrix.app.name }}_health.txt
          fi

      - name: Upload CI Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-artifacts-${{ matrix.app.name }}
          path: |
            artifacts/
          if-no-files-found: error
