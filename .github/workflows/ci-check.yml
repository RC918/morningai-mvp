name: CI Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, feature/**, hotfix/** ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  env-check:
    runs-on: ubuntu-latest
    environment: staging
    strategy:
      matrix:
        app:
          - { name: web, path: apps/web }
          - { name: api, path: apps/api }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        if: ${{ matrix.app.name == 'api' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dotenv for check_env.mjs
        run: npm install -g dotenv

      - name: Create .env from GitHub Secrets
        run: |
          echo "SB_URL=${{ secrets.SB_URL }}" >> .env
          echo "SB_ANON_KEY=${{ secrets.SB_ANON_KEY }}" >> .env
          echo "SB_SERVICE_ROLE_KEY=${{ secrets.SB_SERVICE_ROLE_KEY }}" >> .env
          echo "SB_JWT_SECRET=${{ secrets.SB_JWT_SECRET }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Run Environment Check
        run: |
          node ops/env/scripts/check_env.mjs --env-file .env --app ${{ matrix.app.name }} | tee artifacts/${{ matrix.app.name }}_env_check.txt

      - name: Install dependencies
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "web" ]; then
            npm ci
          else
            pip install -r requirements.txt
          fi

      - name: Lint Check
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "web" ]; then
            npm run lint 2>&1 | tee ../../artifacts/${{ matrix.app.name }}_eslint.txt || echo "ESLint completed with warnings/errors" >> ../../artifacts/${{ matrix.app.name }}_eslint.txt
          else
            flake8 src/ 2>&1 | tee ../../artifacts/${{ matrix.app.name }}_flake8.txt || echo "Flake8 completed with warnings/errors" >> ../../artifacts/${{ matrix.app.name }}_flake8.txt
          fi

      - name: Type Check
        if: ${{ matrix.app.name == 'web' }}
        working-directory: ${{ matrix.app.path }}
        run: |
          npm run typecheck -- --skipLibCheck | tee ../../artifacts/${{ matrix.app.name }}_typecheck.txt

      - name: Alembic Migration Check
        if: ${{ matrix.app.name == 'api' }}
        working-directory: ${{ matrix.app.path }}
        run: |
          echo "=== Alembic Revision History ===" | tee ../../artifacts/alembic_history.txt
          alembic history | tail -n 20 | tee -a ../../artifacts/alembic_history.txt || echo "No migration history found" >> ../../artifacts/alembic_history.txt
          
          echo "=== Alembic Current Status ===" | tee ../../artifacts/alembic_current.txt
          alembic current -v 2>&1 | tee -a ../../artifacts/alembic_current.txt || echo "Alembic not initialized or no database connection" >> ../../artifacts/alembic_current.txt
          
          echo "=== Migration Dry-Run (SQL Generation) ===" | tee ../../artifacts/migration_dry_run.sql
          alembic upgrade head --sql 2>&1 | tee -a ../../artifacts/migration_dry_run.sql || echo "-- No migrations to apply or database connection issue" >> ../../artifacts/migration_dry_run.sql

      - name: Import Smoke Test
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "web" ]; then
            echo "=== Web Import Smoke Test ===" | tee ../../artifacts/${{ matrix.app.name }}_import_smoke.txt
            # 檢查主要模組是否可以正常導入
            node -e "
              try {
                console.log('Testing Next.js imports...');
                require('next');
                console.log('✅ Next.js import successful');
                
                console.log('Testing React imports...');
                require('react');
                console.log('✅ React import successful');
                
                console.log('All imports successful');
              } catch (error) {
                console.error('❌ Import failed:', error.message);
                process.exit(1);
              }
            " 2>&1 | tee -a ../../artifacts/${{ matrix.app.name }}_import_smoke.txt
          else
            echo "=== API Import Smoke Test ===" | tee ../../artifacts/${{ matrix.app.name }}_import_smoke.txt
            # 使用新的 Import Smoke Test 腳本
            python ../../scripts/import_smoke_test.py 2>&1 | tee -a ../../artifacts/${{ matrix.app.name }}_import_smoke.txt
          fi

      - name: Environment Guard Check
        run: |
          echo "=== Environment Guard Check ===" | tee artifacts/env_guard.txt
          python scripts/env_guard.py 2>&1 | tee -a artifacts/env_guard.txt || echo "Environment check completed with warnings" >> artifacts/env_guard.txt

      - name: Unit Tests
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "web" ]; then
            npm run test 2>&1 | tee ../../artifacts/${{ matrix.app.name }}_test.txt || echo "Tests completed with failures" >> ../../artifacts/${{ matrix.app.name }}_test.txt
          else
            pytest tests/ -v 2>&1 | tee ../../artifacts/${{ matrix.app.name }}_pytest.txt || echo "Tests completed with failures" >> ../../artifacts/${{ matrix.app.name }}_pytest.txt
          fi

      - name: Health Check
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "api" ]; then
            echo "Starting API health check..." | tee ../../artifacts/health.txt
            nohup python src/main.py > api_dev.log 2>&1 &
            sleep 10
            curl --fail http://localhost:5000/health 2>&1 | tee -a ../../artifacts/health.txt || echo "Health check failed" >> ../../artifacts/health.txt
            
            # 測試其他重要端點
            echo "Testing additional endpoints..." >> ../../artifacts/health.txt
            curl --fail http://localhost:5000/ 2>&1 | tee -a ../../artifacts/health.txt || echo "Root endpoint test failed" >> ../../artifacts/health.txt
          else
            echo "Web health check skipped" > ../../artifacts/${{ matrix.app.name }}_health.txt
          fi

      - name: E2E Smoke Test
        if: ${{ matrix.app.name == 'api' }}
        env:
          API_URL: ${{ vars.API_URL || 'https://morningai-mvp.onrender.com' }}
          WEB_URL: ${{ vars.WEB_URL || 'https://morningai-mvp-web.vercel.app' }}
        run: |
          echo "=== E2E Smoke Test ===" | tee artifacts/e2e_smoke.txt
          python scripts/e2e_smoke_test.py 2>&1 | tee -a artifacts/e2e_smoke.txt || echo "E2E smoke test completed with failures" >> artifacts/e2e_smoke.txt

      - name: Security Quick Check
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "api" ]; then
            echo "=== API Security Quick Check ===" | tee ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            
            # 檢查是否有硬編碼的秘密
            echo "Checking for hardcoded secrets..." >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            grep -r -i "password\s*=" src/ >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt || echo "No hardcoded passwords found" >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            grep -r -i "api[_-]key\s*=" src/ >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt || echo "No hardcoded API keys found" >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt

      - name: RLS Security Test
        if: ${{ matrix.app.name == 'api' }}
        env:
          API_URL: ${{ vars.API_URL || 'https://morningai-mvp.onrender.com' }}
        run: |
          echo "=== RLS/權限安全測試 ===" | tee artifacts/rls_security.txt
          python scripts/rls_security_test.py 2>&1 | tee -a artifacts/rls_security.txt || echo "RLS security test completed with warnings" >> artifacts/rls_security.txt

      - name: Security Static Analysis
        working-directory: ${{ matrix.app.path }}
        run: |
          if [ "${{ matrix.app.name }}" = "api" ]; then
            # 檢查 SQL 注入風險
            echo "Checking for potential SQL injection risks..." >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            grep -r "execute.*%" src/ >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt || echo "No obvious SQL injection patterns found" >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            
            # 檢查 debug 模式
            echo "Checking for debug mode..." >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            grep -r "debug.*=.*True" src/ >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt || echo "No hardcoded debug=True found" >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
          else
            echo "=== Web Security Quick Check ===" | tee ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            
            # 檢查是否有硬編碼的 API 金鑰
            echo "Checking for hardcoded secrets..." >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            find . -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | xargs grep -l "api[_-]key\|apikey" >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt || echo "No hardcoded API keys found" >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            
            # 檢查環境變數使用
            echo "Checking environment variable usage..." >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
            find . -name "*.ts" -o -name "*.tsx" | xargs grep "process\.env\." | head -10 >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt || echo "No environment variables found" >> ../../artifacts/${{ matrix.app.name }}_security_quick.txt
          fi

      - name: Upload CI Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-artifacts-${{ matrix.app.name }}
          path: |
            artifacts/
            apps/api/e2e_smoke_report.json
            apps/api/rls_security_test_report.json
          if-no-files-found: error
